#!/bin/bash

# Colores
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

API_URL="http://localhost:3000/api/blog"

ADMIN_TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY4ZGNlYTQ2YWRjZjAzZjY4MTM1YmRjYSIsImlhdCI6MTc1OTMwODM2NSwiZXhwIjoxNzU5MzExOTY1fQ.4EXo9Bgk0ju7lK1SkiYpGuoAXq3CrVXhCt717vS519w" # <-- Pon aqu√≠ tu token JWT


echo -e "${BLUE}üöÄ TESTING ADD BLOG ENDPOINT${NC}"
echo -e "${BLUE}===== Basado en casos de addBlog.test.ts =====${NC}\n"

# ‚úÖ HAPPY PATH TESTS
echo -e "${GREEN}‚úÖ === HAPPY PATH TESTS ===${NC}\n"

echo -e "${YELLOW}Test 1: Blog completo con todos los campos${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "Gu√≠a Completa de TypeScript para Desarrolladores",
  "content": "TypeScript es un superset de JavaScript que a√±ade tipado est√°tico. En esta gu√≠a completa aprenderemos desde conceptos b√°sicos hasta patrones avanzados, incluyendo generics, decoradores, y mejores pr√°cticas para proyectos empresariales.",
  "summary": "Todo lo que necesitas saber sobre TypeScript",
  "tags": ["typescript", "javascript", "programacion", "desarrollo"],
  "author": "Santiago Nardelli",
  "isPublished": true,
  "publishedAt": "2025-01-15T10:30:00.000Z"
}'
echo -e "${GREEN}‚úÖ Esperado: 201 Created${NC}\n"

echo -e "${YELLOW}Test 2: Blog m√≠nimo (solo campos obligatorios)${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "Post B√°sico con Contenido Suficiente",
  "content": "Este es un contenido m√≠nimo pero v√°lido que cumple con los requisitos de tener al menos 20 caracteres para ser aceptado."
}'
echo -e "${GREEN}‚úÖ Esperado: 201 Created${NC}\n"

echo -e "${YELLOW}Test 3: Blog con campos opcionales null/undefined${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "Blog con Campos Opcionales Vac√≠os",
  "content": "Contenido v√°lido con m√°s de veinte caracteres para cumplir validaciones m√≠nimas.",
  "summary": null,
  "tags": [],
  "author": null,
  "isPublished": false
}'
echo -e "${GREEN}‚úÖ Esperado: 201 Created${NC}\n"

# ‚ùå VALIDATION ERROR TESTS
echo -e "\n${RED}‚ùå === VALIDATION ERROR TESTS ===${NC}\n"

echo -e "${YELLOW}Test 4: T√≠tulo muy corto (< 5 caracteres)${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "Hi",
  "content": "Contenido v√°lido con m√°s de veinte caracteres necesarios para pasar validaci√≥n m√≠nima."
}'
echo -e "${RED}‚ùå Esperado: 400 - ValidationError (t√≠tulo muy corto)${NC}\n"

echo -e "${YELLOW}Test 5: T√≠tulo muy largo (> 200 caracteres)${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "Este es un t√≠tulo extremadamente largo que excede los doscientos caracteres permitidos por la validaci√≥n del schema de Zod y deber√≠a fallar completamente al intentar crear un blog con estas caracter√≠sticas tan espec√≠ficas",
  "content": "Contenido v√°lido con m√°s de veinte caracteres para cumplir con las validaciones."
}'
echo -e "${RED}‚ùå Esperado: 400 - ValidationError (t√≠tulo muy largo)${NC}\n"

echo -e "${YELLOW}Test 6: Contenido muy corto (< 20 caracteres)${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "T√≠tulo V√°lido con Longitud Correcta",
  "content": "Corto"
}'
echo -e "${RED}‚ùå Esperado: 400 - ValidationError (contenido muy corto)${NC}\n"

echo -e "${YELLOW}Test 7: M√∫ltiples errores de validaci√≥n${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Content-Type: application/json" \
-d '{
  "title": "X",
  "content": "Y",
  "publishedAt": "fecha-invalida-no-iso"
}'
echo -e "${RED}‚ùå Esperado: 400 - ValidationError (m√∫ltiples errores)${NC}\n"

echo -e "${YELLOW}Test 8: Campos faltantes (sin t√≠tulo)${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "content": "Contenido v√°lido pero falta el t√≠tulo obligatorio para crear el blog."
}'
echo -e "${RED}‚ùå Esperado: 400 - ValidationError (t√≠tulo faltante)${NC}\n"

echo -e "${YELLOW}Test 9: Campos faltantes (sin contenido)${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "T√≠tulo V√°lido pero Sin Contenido"
}'
echo -e "${RED}‚ùå Esperado: 400 - ValidationError (contenido faltante)${NC}\n"

# ‚ùå DUPLICITY ERROR TESTS
echo -e "\n${PURPLE}üîÑ === DUPLICITY ERROR TESTS ===${NC}\n"

echo -e "${YELLOW}Test 10: Duplicidad por t√≠tulo exacto${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "Gu√≠a Completa de TypeScript para Desarrolladores",
  "content": "Este es otro contenido diferente, pero el t√≠tulo es exactamente igual al primer blog creado."
}'
echo -e "${RED}‚ùå Esperado: 409 - DuplicityError (t√≠tulo duplicado)${NC}\n"

echo -e "${YELLOW}Test 11: Duplicidad por slug generado${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "Gu√≠a COMPLETA de TypeScript PARA desarrolladores",
  "content": "T√≠tulo ligeramente diferente pero que genera el mismo slug al ser procesado por la funci√≥n slugify."
}'
echo -e "${RED}‚ùå Esperado: 409 - DuplicityError (slug duplicado)${NC}\n"

# üß™ EDGE CASE TESTS  
echo -e "\n${BLUE}üß™ === EDGE CASE TESTS ===${NC}\n"

echo -e "${YELLOW}Test 12: Caracteres especiales y emojis${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "Desarrollo Web con Emojis üöÄ y S√≠mbolos Especiales @#$%",
  "content": "Este post prueba caracteres especiales: √°√©√≠√≥√∫, √±, √ß, s√≠mbolos ‚àë‚àè‚àÜ, emojis üéØüß™üî•, y otros caracteres Unicode. El contenido debe ser procesado correctamente.",
  "tags": ["testing", "unicode", "emojis", "caracteres-especiales"],
  "summary": "Prueba de manejo de caracteres especiales üß™"
}'
echo -e "${GREEN}‚úÖ Esperado: 201 Created (caracteres especiales manejados)${NC}\n"

echo -e "${YELLOW}Test 13: Arrays vac√≠os vs null${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "Blog para Probar Arrays Vac√≠os vs Null",
  "content": "Contenido que prueba el manejo de arrays vac√≠os versus valores null en el schema.",
  "tags": []
}'
echo -e "${GREEN}‚úÖ Esperado: 201 Created (arrays vac√≠os v√°lidos)${NC}\n"

echo -e "${YELLOW}Test 14: Fecha ISO v√°lida${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "Blog con Fecha de Publicaci√≥n Espec√≠fica",
  "content": "Este blog tiene una fecha de publicaci√≥n espec√≠fica en formato ISO 8601 v√°lido.",
  "publishedAt": "2025-02-01T14:30:00.000Z",
  "isPublished": true
}'
echo -e "${GREEN}‚úÖ Esperado: 201 Created (fecha v√°lida procesada)${NC}\n"

# ‚ùå MALFORMED REQUEST TESTS
echo -e "\n${RED}üí• === MALFORMED REQUEST TESTS ===${NC}\n"

echo -e "${YELLOW}Test 15: JSON malformado${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: application/json" \
-d '{
  "title": "JSON mal formado",
  "content": "Contenido v√°lido",
  "tags": ["sin-cerrar-corchete"
}'
echo -e "${RED}‚ùå Esperado: 400 - JSON Parse Error${NC}\n"

echo -e "${YELLOW}Test 16: Content-Type incorrecto${NC}"
curl -s -w "\nStatus: %{http_code}\n" -X POST $API_URL \
-H "Cookie: accessToken=${ADMIN_TOKEN}" \
-H "Content-Type: text/plain" \
-d 'esto-no-es-json'
echo -e "${RED}‚ùå Esperado: 400 - Invalid Content-Type${NC}\n"

echo -e "\n${BLUE}===============================================${NC}"
echo -e "${BLUE}üèÅ TESTS DE ADD BLOG COMPLETADOS (16 tests)${NC}"
echo -e "${BLUE}===============================================${NC}\n"

echo -e "${GREEN}‚úÖ Tests exitosos esperados: 1, 2, 3, 12, 13, 14 (6 tests)${NC}"
echo -e "${RED}‚ùå Tests de error esperados: 4, 5, 6, 7, 8, 9, 10, 11, 15, 16 (10 tests)${NC}\n"

echo -e "${YELLOW}ÔøΩ COBERTURA DE CASOS:${NC}"
echo -e "   ‚Ä¢ Happy Path: Blogs v√°lidos con diferentes configuraciones"
echo -e "   ‚Ä¢ Validation Errors: T√≠tulos/contenido muy corto/largo, campos faltantes"
echo -e "   ‚Ä¢ Duplicity Errors: T√≠tulos exactos y slugs duplicados"
echo -e "   ‚Ä¢ Edge Cases: Caracteres especiales, arrays, fechas ISO"
echo -e "   ‚Ä¢ Malformed Requests: JSON inv√°lido, Content-Type incorrecto"
echo -e "\n${BLUE}üí° Tip: Usar flag -v en lugar de -s para ver respuestas detalladas${NC}"
