#!/bin/bash

# Test completo para GET /api/blog - getAllBlogs
# Basado en la l√≥gica de getAllBlogs.ts con paginaci√≥n y filtros

BASE_URL="http://localhost:3000/api/blog"

echo "üöÄ TESTING GET BLOGS ENDPOINT"
echo "===== Basado en casos de getAllBlogs.ts ====="
echo ""

# Funci√≥n helper para mostrar resultados
show_result() {
    local test_name="$1"
    local response="$2"
    local status="$3"
    local expected="$4"
    
    echo "$test_name"
    echo "Response: $response"
    echo "Status: $status"
    echo "‚úÖ Esperado: $expected"
    echo ""
}

echo "‚úÖ === BASIC FUNCTIONALITY TESTS ==="
echo ""

# Test 1: GET b√°sico - todos los blogs (sin par√°metros)
echo "Test 1: GET b√°sico - todos los blogs (sin par√°metros)"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 1: GET b√°sico" "$body" "$status_code" "200 OK - Lista con estructura {blogs, total, page, totalPages}"

# Test 2: GET con paginaci√≥n b√°sica
echo "Test 2: GET con paginaci√≥n b√°sica (page=1, limit=5)"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?page=1&limit=5")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 2: Paginaci√≥n b√°sica" "$body" "$status_code" "200 OK - M√°ximo 5 blogs"

# Test 3: GET p√°gina espec√≠fica
echo "Test 3: GET p√°gina espec√≠fica (page=2)"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?page=2&limit=3")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 3: P√°gina espec√≠fica" "$body" "$status_code" "200 OK - P√°gina 2 con 3 blogs m√°ximo"

echo ""
echo "üîç === FILTERING TESTS ==="
echo ""

# Test 4: Filtrar por isPublished=true
echo "Test 4: Filtrar por blogs publicados (isPublished=true)"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?isPublished=true")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 4: Solo publicados" "$body" "$status_code" "200 OK - Solo blogs con isPublished=true"

# Test 5: Filtrar por isPublished=false
echo "Test 5: Filtrar por borradores (isPublished=false)"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?isPublished=false")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 5: Solo borradores" "$body" "$status_code" "200 OK - Solo blogs con isPublished=false"

# Test 6: Filtrar por autor
echo "Test 6: Filtrar por autor espec√≠fico"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?author=Santiago")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 6: Por autor" "$body" "$status_code" "200 OK - Solo blogs del autor Santiago"

# Test 7: Filtrar por tags (un tag)
echo "Test 7: Filtrar por un tag espec√≠fico"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?tags=javascript")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 7: Por un tag" "$body" "$status_code" "200 OK - Blogs que contengan tag 'javascript'"

# Test 8: Filtrar por m√∫ltiples tags
echo "Test 8: Filtrar por m√∫ltiples tags"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?tags=javascript,typescript,react")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 8: Por m√∫ltiples tags" "$body" "$status_code" "200 OK - Blogs que contengan cualquiera de esos tags"

echo ""
echo "üîó === COMBINATION TESTS ==="
echo ""

# Test 9: Combinaci√≥n de filtros
echo "Test 9: Combinaci√≥n completa (published + author + tags + paginaci√≥n)"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?page=1&limit=10&isPublished=true&author=Santiago&tags=javascript,react")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 9: Combinaci√≥n completa" "$body" "$status_code" "200 OK - Blogs que cumplan todos los criterios"

# Test 10: Paginaci√≥n avanzada
echo "Test 10: Paginaci√≥n l√≠mite alto"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?page=1&limit=100")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 10: L√≠mite alto" "$body" "$status_code" "200 OK - Hasta 100 blogs"

echo ""
echo "‚ö° === EDGE CASE TESTS ==="
echo ""

# Test 11: P√°gina que no existe
echo "Test 11: P√°gina que no existe (page=999)"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?page=999")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 11: P√°gina inexistente" "$body" "$status_code" "200 OK - Array vac√≠o pero estructura v√°lida"

# Test 12: Par√°metros inv√°lidos (page=0)
echo "Test 12: P√°gina inv√°lida (page=0)"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?page=0")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 12: P√°gina 0" "$body" "$status_code" "200 OK - Deber√≠a tratar como p√°gina 1"

# Test 13: Limit=0
echo "Test 13: L√≠mite cero (limit=0)"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?limit=0")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 13: L√≠mite 0" "$body" "$status_code" "200 OK - Array vac√≠o"

# Test 14: Par√°metros con caracteres especiales
echo "Test 14: Tags con espacios y caracteres especiales"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?tags=java%20script,node.js")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 14: Caracteres especiales" "$body" "$status_code" "200 OK - Manejo correcto de URL encoding"

# Test 15: Autor vac√≠o
echo "Test 15: Autor como string vac√≠o"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?author=")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 15: Autor vac√≠o" "$body" "$status_code" "200 OK - Deber√≠a ignorar filtro de autor"

echo ""
echo "üõ†Ô∏è === MALFORMED REQUEST TESTS ==="
echo ""

# Test 16: Par√°metros con formato incorrecto
echo "Test 16: isPublished con valor inv√°lido"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?isPublished=maybe")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 16: isPublished inv√°lido" "$body" "$status_code" "200 OK - Deber√≠a tratar como false"

# Test 17: Page y limit no num√©ricos
echo "Test 17: Page y limit no num√©ricos"
response=$(curl -s -w "\n%{http_code}" -X GET "$BASE_URL?page=abc&limit=xyz")
body=$(echo "$response" | head -n -1)
status_code=$(echo "$response" | tail -n 1)
show_result "Test 17: Par√°metros no num√©ricos" "$body" "$status_code" "200 OK - Deber√≠a usar defaults (page=1, limit=10)"

echo ""
echo "==============================================="
echo "üèÅ TESTS DE GET BLOGS COMPLETADOS (17 tests)"
echo "==============================================="
echo ""
echo "‚úÖ Funcionalidad b√°sica: 1, 2, 3 (3 tests)"
echo "üîç Tests de filtrado: 4, 5, 6, 7, 8 (5 tests)"
echo "üîó Tests de combinaci√≥n: 9, 10 (2 tests)"
echo "‚ö° Casos l√≠mite: 11, 12, 13, 14, 15 (5 tests)"
echo "üõ†Ô∏è Requests malformados: 16, 17 (2 tests)"
echo ""
echo "üìä COBERTURA DE CASOS:"
echo "   ‚Ä¢ Paginaci√≥n: page, limit, p√°ginas inexistentes"
echo "   ‚Ä¢ Filtros: isPublished, author, tags (individual y m√∫ltiple)"
echo "   ‚Ä¢ Combinaciones: Todos los filtros juntos"
echo "   ‚Ä¢ Edge Cases: L√≠mites, caracteres especiales, par√°metros inv√°lidos"
echo "   ‚Ä¢ Validaci√≥n: Par√°metros malformados, tipos incorrectos"
echo ""
echo "üí° Tip: Usar | jq para formatear respuestas JSON"
